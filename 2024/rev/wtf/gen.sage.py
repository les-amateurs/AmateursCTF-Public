

# This file was *autogenerated* from the file /mnt/d/Cybersecurity/ChalDev/2024/amateurs-ctf-2024/rev/wtf/gen.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1000000007 = Integer(1000000007); _sage_const_0xf10c70 = Integer(0xf10c70); _sage_const_12 = Integer(12); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8)
p = _sage_const_1000000007 
P = GF(p)

a = int.from_bytes(b'sbg', 'little')
b = int.from_bytes(b'love', 'little')
c = int.from_bytes(b'lcg', 'little')
seed = _sage_const_0xf10c70  
print(a, b, c, seed)

N = _sage_const_12 
m = []
for i in range(N):
    row = []
    for j in range(N):
        seed = (a * seed * seed + b * seed + c) % p
        row.append(P(seed))
    m.append(row)

M = Matrix(m)
show(M) 

order = M.multiplicative_order()
order = int(order)
print(order, order.bit_length())
key = order.to_bytes((order.bit_length() + _sage_const_7 ) // _sage_const_8 , 'big')
print(key, len(key), key.hex())

flag = b'TH3_8357_C0m3_4_th0s3_who_W41t'
print(flag, len(flag))

def xor(a, b):
    return bytes([x ^ y for x, y in zip(a, b)])

print(xor(flag, key).hex())

