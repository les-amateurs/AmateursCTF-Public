

# This file was *autogenerated* from the file /mnt/d/Cybersecurity/ChalDev/2024/amateurs-ctf-2024/rev/wtf/solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x3b9aca07 = Integer(0x3b9aca07); _sage_const_0x676273 = Integer(0x676273); _sage_const_0x65766f6c = Integer(0x65766f6c); _sage_const_0x67636c = Integer(0x67636c); _sage_const_0xf10c70 = Integer(0xf10c70); _sage_const_12 = Integer(12); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8)
enc = b"\xc4\xac\x23\x18\x33\x33\x13\x3c\x9f\xfa\xda\xf4\xd1\x99\x17\x0b\x81\xaa\xea\x27\x9d\x4a\x45\x06\x79\xb9\xf1\x3b\x17\xb4"
p = _sage_const_0x3b9aca07 
P = GF(p)

a = _sage_const_0x676273 
b = _sage_const_0x65766f6c 
c = _sage_const_0x67636c 
seed = _sage_const_0xf10c70  
print(a, b, c, seed)

N = _sage_const_12 
m = []
for i in range(N):
    row = []
    for j in range(N):
        seed = (a * seed * seed + b * seed + c) % p
        row.append(P(seed))
    m.append(row)

M = Matrix(m)

order = M.multiplicative_order()
order = int(order)
print(order, order.bit_length())
key = order.to_bytes((order.bit_length() + _sage_const_7 ) // _sage_const_8 , 'big')
print(key, len(key))

flag = b''

for i in range(len(enc)):
    flag += bytes([enc[i] ^ key[i % len(key)]])

print(flag)

